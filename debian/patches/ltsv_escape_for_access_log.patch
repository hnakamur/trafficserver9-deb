diff --git a/proxy/logging/LogAccess.cc b/proxy/logging/LogAccess.cc
index eee6eb919..1ddb8454d 100644
--- a/proxy/logging/LogAccess.cc
+++ b/proxy/logging/LogAccess.cc
@@ -778,6 +778,74 @@ LogAccess::unmarshal_str_json(char **buf, char *dest, int len, LogSlice *slice)
   return -1;
 }
 
+static int
+escape_ltsv(char *dest, const char *buf, int len)
+{
+  int escaped_len = 0;
+
+  for (int i = 0; i < len; i++) {
+    char c  = buf[i];
+    if (c == '\\' || c == '\t' || c == '\n') { // escape.
+      if (dest) {
+        if (escaped_len + 2 > len) {
+          break;
+        }
+        *dest++ = '\\';
+        switch (c) {
+        case '\\': *dest++ = '\\'; break;
+        case '\t': *dest++ = 't'; break;
+        case '\n': *dest++ = 'n'; break;
+        }
+      }
+      escaped_len += 2;
+
+    } else {
+      if (dest) {
+        if (escaped_len + 1 > len) {
+          break;
+        }
+        *dest++ = c;
+      }
+      escaped_len++;
+    }
+  } // end for
+  return escaped_len;
+}
+
+int
+LogAccess::unmarshal_str_ltsv(char **buf, char *dest, int len, LogSlice *slice)
+{
+  Debug("log-escape", "unmarshal_str_ltsv start, len=%d, slice=%p", len, slice);
+
+  char *val_buf   = *buf;
+  int val_len     = static_cast<int>(::strlen(val_buf));
+  int escaped_len = escape_ltsv(nullptr, val_buf, val_len);
+
+  *buf += LogAccess::strlen(val_buf); // this is how it was stored
+
+  if (slice && slice->m_enable) {
+    int offset, n;
+
+    n = slice->toStrOffset(escaped_len, &offset);
+    Debug("log-escape", "unmarshal_str_ltsv start, n=%d, offset=%d", n, offset);
+    if (n <= 0) {
+      return 0;
+    }
+
+    if (n >= len) {
+      return -1;
+    }
+
+    return escape_ltsv(dest, (val_buf + offset), n);
+  }
+
+  if (escaped_len < len) {
+    escape_ltsv(dest, val_buf, escaped_len);
+    return escaped_len;
+  }
+  return -1;
+}
+
 int
 LogAccess::unmarshal_ttmsf(char **buf, char *dest, int len)
 {
@@ -976,6 +1044,34 @@ LogAccess::unmarshal_http_text_json(char **buf, char *dest, int len, LogSlice *s
   return res1 + res2 + res3 + 2;
 }
 
+int
+LogAccess::unmarshal_http_text_ltsv(char **buf, char *dest, int len, LogSlice *slice)
+{
+  ink_assert(buf != nullptr);
+  ink_assert(*buf != nullptr);
+  ink_assert(dest != nullptr);
+
+  char *p = dest;
+
+  int res1 = unmarshal_str_ltsv(buf, p, len);
+  if (res1 < 0) {
+    return -1;
+  }
+  p += res1;
+  *p++     = ' ';
+  int res2 = unmarshal_str_ltsv(buf, p, len - res1 - 1, slice);
+  if (res2 < 0) {
+    return -1;
+  }
+  p += res2;
+  *p++     = ' ';
+  int res3 = unmarshal_http_version(buf, p, len - res1 - res2 - 2);
+  if (res3 < 0) {
+    return -1;
+  }
+  return res1 + res2 + res3 + 2;
+}
+
 /*-------------------------------------------------------------------------
   LogAccess::unmarshal_http_status
 
diff --git a/proxy/logging/LogAccess.h b/proxy/logging/LogAccess.h
index db799131c..0efddf4a8 100644
--- a/proxy/logging/LogAccess.h
+++ b/proxy/logging/LogAccess.h
@@ -306,6 +306,7 @@ public:
   static int unmarshal_int_to_str_hex(char **buf, char *dest, int len);
   static int unmarshal_str(char **buf, char *dest, int len, LogSlice *slice = nullptr);
   static int unmarshal_str_json(char **buf, char *dest, int len, LogSlice *slice = nullptr);
+  static int unmarshal_str_ltsv(char **buf, char *dest, int len, LogSlice *slice = nullptr);
   static int unmarshal_ttmsf(char **buf, char *dest, int len);
   static int unmarshal_int_to_date_str(char **buf, char *dest, int len);
   static int unmarshal_int_to_time_str(char **buf, char *dest, int len);
@@ -313,6 +314,7 @@ public:
   static int unmarshal_http_version(char **buf, char *dest, int len);
   static int unmarshal_http_text(char **buf, char *dest, int len, LogSlice *slice = nullptr);
   static int unmarshal_http_text_json(char **buf, char *dest, int len, LogSlice *slice = nullptr);
+  static int unmarshal_http_text_ltsv(char **buf, char *dest, int len, LogSlice *slice = nullptr);
   static int unmarshal_http_status(char **buf, char *dest, int len);
   static int unmarshal_ip(char **buf, IpEndpoint *dest);
   static int unmarshal_ip_to_str(char **buf, char *dest, int len);
diff --git a/proxy/logging/LogField.cc b/proxy/logging/LogField.cc
index 0a396ed29..48f2f343f 100644
--- a/proxy/logging/LogField.cc
+++ b/proxy/logging/LogField.cc
@@ -604,6 +604,12 @@ LogField::unmarshal(char **buf, char *dest, int len, LogEscapeType escape_type)
         } else if (m_unmarshal_func == reinterpret_cast<UnmarshalFunc>(LogAccess::unmarshal_http_text)) {
           func = reinterpret_cast<UnmarshalFuncWithSlice>(LogAccess::unmarshal_http_text_json);
         }
+      } else if (escape_type == LOG_ESCAPE_LTSV) {
+        if (m_unmarshal_func == reinterpret_cast<UnmarshalFunc>(LogAccess::unmarshal_str)) {
+          func = reinterpret_cast<UnmarshalFuncWithSlice>(LogAccess::unmarshal_str_ltsv);
+        } else if (m_unmarshal_func == reinterpret_cast<UnmarshalFunc>(LogAccess::unmarshal_http_text)) {
+          func = reinterpret_cast<UnmarshalFuncWithSlice>(LogAccess::unmarshal_http_text_ltsv);
+        }
       }
       return (*func)(buf, dest, len, &m_slice);
     }
diff --git a/proxy/logging/LogField.h b/proxy/logging/LogField.h
index 3d6b1348a..ea225f5a2 100644
--- a/proxy/logging/LogField.h
+++ b/proxy/logging/LogField.h
@@ -32,7 +32,7 @@
 #include "LogFieldAliasMap.h"
 #include "Milestones.h"
 
-enum LogEscapeType { LOG_ESCAPE_NONE, LOG_ESCAPE_JSON };
+enum LogEscapeType { LOG_ESCAPE_NONE, LOG_ESCAPE_JSON, LOG_ESCAPE_LTSV };
 
 class LogAccess;
 
diff --git a/proxy/logging/YamlLogConfigDecoders.cc b/proxy/logging/YamlLogConfigDecoders.cc
index 328f2752a..ba7cef930 100644
--- a/proxy/logging/YamlLogConfigDecoders.cc
+++ b/proxy/logging/YamlLogConfigDecoders.cc
@@ -75,6 +75,8 @@ convert<std::unique_ptr<LogFormat>>::decode(const Node &node, std::unique_ptr<Lo
     std::string escape = node["escape"].as<std::string>();
     if (!strncasecmp(escape.c_str(), "json", 4)) {
       escape_type = LOG_ESCAPE_JSON;
+    } else if (!strncasecmp(escape.c_str(), "ltsv", 4)) {
+      escape_type = LOG_ESCAPE_LTSV;
     } else if (!strncasecmp(escape.c_str(), "none", 4)) {
       escape_type = LOG_ESCAPE_NONE;
     } else {
